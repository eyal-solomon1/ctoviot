// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eyal-solomon1/ctoviot/internal/ffmpeg (interfaces: FFMPEG)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFFMPEG is a mock of FFMPEG interface.
type MockFFMPEG struct {
	ctrl     *gomock.Controller
	recorder *MockFFMPEGMockRecorder
}

// MockFFMPEGMockRecorder is the mock recorder for MockFFMPEG.
type MockFFMPEGMockRecorder struct {
	mock *MockFFMPEG
}

// NewMockFFMPEG creates a new mock instance.
func NewMockFFMPEG(ctrl *gomock.Controller) *MockFFMPEG {
	mock := &MockFFMPEG{ctrl: ctrl}
	mock.recorder = &MockFFMPEGMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFFMPEG) EXPECT() *MockFFMPEGMockRecorder {
	return m.recorder
}

// CreateAudioFile mocks base method.
func (m *MockFFMPEG) CreateAudioFile(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAudioFile", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAudioFile indicates an expected call of CreateAudioFile.
func (mr *MockFFMPEGMockRecorder) CreateAudioFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAudioFile", reflect.TypeOf((*MockFFMPEG)(nil).CreateAudioFile), arg0)
}

// GetFileDuration mocks base method.
func (m *MockFFMPEG) GetFileDuration(arg0 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileDuration", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileDuration indicates an expected call of GetFileDuration.
func (mr *MockFFMPEGMockRecorder) GetFileDuration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileDuration", reflect.TypeOf((*MockFFMPEG)(nil).GetFileDuration), arg0)
}

// MatchTranscriptionsToVideo mocks base method.
func (m *MockFFMPEG) MatchTranscriptionsToVideo(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchTranscriptionsToVideo", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchTranscriptionsToVideo indicates an expected call of MatchTranscriptionsToVideo.
func (mr *MockFFMPEGMockRecorder) MatchTranscriptionsToVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchTranscriptionsToVideo", reflect.TypeOf((*MockFFMPEG)(nil).MatchTranscriptionsToVideo), arg0, arg1)
}
