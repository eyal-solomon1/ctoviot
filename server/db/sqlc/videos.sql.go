// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: videos.sql

package db

import (
	"context"
)

const createVideo = `-- name: CreateVideo :one
INSERT INTO videos (
  owner,
  video_identifier,
  video_name,
  video_length,
  video_remote_path,
  video_decs  
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, owner, video_name, video_identifier, video_length, video_remote_path, video_decs, created_at
`

type CreateVideoParams struct {
	Owner           string `json:"owner"`
	VideoIdentifier string `json:"video_identifier"`
	VideoName       string `json:"video_name"`
	VideoLength     int64  `json:"video_length"`
	VideoRemotePath string `json:"video_remote_path"`
	VideoDecs       string `json:"video_decs"`
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, createVideo,
		arg.Owner,
		arg.VideoIdentifier,
		arg.VideoName,
		arg.VideoLength,
		arg.VideoRemotePath,
		arg.VideoDecs,
	)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.VideoName,
		&i.VideoIdentifier,
		&i.VideoLength,
		&i.VideoRemotePath,
		&i.VideoDecs,
		&i.CreatedAt,
	)
	return i, err
}

const deleteVideo = `-- name: DeleteVideo :one
DELETE FROM videos
WHERE video_identifier = $1
RETURNING id, owner, video_name, video_identifier, video_length, video_remote_path, video_decs, created_at
`

func (q *Queries) DeleteVideo(ctx context.Context, videoIdentifier string) (Video, error) {
	row := q.db.QueryRowContext(ctx, deleteVideo, videoIdentifier)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.VideoName,
		&i.VideoIdentifier,
		&i.VideoLength,
		&i.VideoRemotePath,
		&i.VideoDecs,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersVideosCount = `-- name: GetUsersVideosCount :one
SELECT COUNT(*) FROM videos
WHERE owner = $1
`

func (q *Queries) GetUsersVideosCount(ctx context.Context, owner string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUsersVideosCount, owner)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getVideo = `-- name: GetVideo :one
SELECT id, owner, video_name, video_identifier, video_length, video_remote_path, video_decs, created_at FROM videos
WHERE video_identifier = $1 AND owner = $2 LIMIT 1
`

type GetVideoParams struct {
	VideoIdentifier string `json:"video_identifier"`
	Owner           string `json:"owner"`
}

func (q *Queries) GetVideo(ctx context.Context, arg GetVideoParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, getVideo, arg.VideoIdentifier, arg.Owner)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.VideoName,
		&i.VideoIdentifier,
		&i.VideoLength,
		&i.VideoRemotePath,
		&i.VideoDecs,
		&i.CreatedAt,
	)
	return i, err
}

const listVideos = `-- name: ListVideos :many
SELECT id, owner, video_name, video_identifier, video_length, video_remote_path, video_decs, created_at FROM videos
WHERE owner = $1
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type ListVideosParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListVideos(ctx context.Context, arg ListVideosParams) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, listVideos, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.VideoName,
			&i.VideoIdentifier,
			&i.VideoLength,
			&i.VideoRemotePath,
			&i.VideoDecs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
